steps:
# We have github personal access token stored in `github-token-access` secret in our GCP project.
# This step downloads it and store it in token.txt file for later steps to use for authentication.
- name: gcr.io/cloud-builders/gcloud
  entrypoint: 'bash'
  args: [ '-c', "gcloud secrets versions access latest --secret=github-token-access --format='get(payload.data)' | tr '_-' '/+' | base64 -d > token.txt" ]
- name: gcr.io/cloud-builders/git
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e
    echo "Set the git config..."
    git config user.name $_GITHUB_USER
    git config user.email $_GITHUB_EMAIL
    git remote set-url origin https://$_GITHUB_USER:$(cat token.txt)@github.com/dataform-co/dataform.git
    export git_branch_name=npm_veriosn_$(cat version.bzl | grep DF_VERSION | awk '{ print $3 }' | sed "s/\"//g")
    echo "Create new branch $git_branch_name..."
    git checkout -b $git_branch_name
    echo "Update version..."
    ./scripts/update_version
    git add version.bzl
    git commit -m "Update the npm package version"
    echo "Push changes to remote..."
    git push origin $git_branch_name
    echo $git_branch_name > git_branch_name.txt
- name: 'gcr.io/$PROJECT_ID/github'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e
    echo "Create PR..."
    gh auth login --with-token < token.txt
    gh pr create -t "Publish a new NPM versions" -b "Updating NPM package version to $(cat version.bzl | grep DF_VERSION | awk '{ print $3 }' | sed "s/\"//g")" -B $BRANCH_NAME -H $(cat git_branch_name.txt)
options:
  automapSubstitutions: true
