syntax = "proto3";

package dataform;

option java_package = "com.dataform.protos";
option java_outer_classname = "CoreMeta";
option java_multiple_files = true;

option go_package = "github.com/dataform-co/dataform/protos/dataform";

message ProjectConfig {
  string warehouse = 1;

  string default_database = 9;
  string default_schema = 2;
  string default_location = 16;

  string assertion_schema = 5;

  map<string, string> vars = 14;

  string database_suffix = 15;
  string schema_suffix = 7;
  string table_prefix = 11;

  string dataform_core_version = 17;

  reserved 3, 4, 6, 8, 10, 12, 13;
}

message CompileConfig {
  // Required.
  string project_dir = 1;

  // A list of all files in the project directory.
  repeated string file_paths = 8;

  // Project configuration overrides.
  ProjectConfig project_config_override = 3;

  // Override compilation timeout settings.
  int32 timeout_millis = 6;

  reserved 2, 4, 5, 7, 9;
}

message Target {
  string database = 3;
  string schema = 1;
  string name = 2;
}

message BigQueryOptions {
  string partition_by = 1;
  repeated string cluster_by = 2;
  string update_partition_filter = 3;
  map<string, string> labels = 4;
  int32 partition_expiration_days = 5;
  bool require_partition_filter = 6;
  map<string, string> additional_options = 7;
}

message GraphErrors {
  repeated CompilationError compilation_errors = 1;

  reserved 2;
}

message CompilationError {
  string file_name = 1;
  // TODO: Deprecate this and replace with action_target.
  string action_name = 4;
  Target action_target = 5;
  string message = 2;
  string stack = 3;
}

message ActionDescriptor {
  string description = 1;
  // For Operations, 'columns' may be set iff has_output == true.
  // For Assertions, 'columns' will always be empty.
  repeated ColumnDescriptor columns = 2;
  map<string, string> bigquery_labels = 3;
}

message ColumnDescriptor {
  string description = 1;

  // For nested records, the path might look like e.g. ["record", "column"].
  // For simple columns, this will always contain a single entry e.g.
  // ["column"].
  repeated string path = 2;

  string display_name = 3;

  repeated string tags = 7;

  // BigQuery specific settings.

  repeated string bigquery_policy_tags = 8;

  reserved 4, 5, 6;
}

enum TableType {
  UNKNOWN_TYPE = 0;
  TABLE = 1;
  INCREMENTAL = 2;
  VIEW = 3;

  reserved 4;
}

message Table {
  // For legacy compatability reasons, both incremental tables and views are
  // configured in compiled graphs via the Table proto.
  TableType enum_type = 36;

  Target target = 4;
  Target canonical_target = 32;

  repeated Target dependency_targets = 27;
  ActionHermeticity hermeticity = 31;

  bool disabled = 6;

  string type = 3 [deprecated = true];
  string query = 5;
  bool protected = 9;
  bool materialized = 35;

  ActionDescriptor action_descriptor = 24;

  repeated string tags = 23;

  // Incremental only.
  string where = 8 [deprecated = true];
  string incremental_query = 26;
  repeated string unique_key = 30;

  // Pre/post operations.
  repeated string pre_ops = 13;
  repeated string post_ops = 14;
  repeated string incremental_pre_ops = 28;
  repeated string incremental_post_ops = 29;

  // Warehouse specific features.
  BigQueryOptions bigquery = 22;

  // Generated.
  string file_name = 18;

  reserved 1, 2, 7, 12, 16;
}

message Operation {
  Target target = 3;
  Target canonical_target = 13;
  repeated Target dependency_targets = 11;

  ActionHermeticity hermeticity = 12;

  bool disabled = 14;

  repeated string queries = 6;
  bool has_output = 8;
  repeated string tags = 9;

  ActionDescriptor action_descriptor = 10;

  // Generated.
  string file_name = 7;

  reserved 1, 2, 4, 5;
}

message Assertion {
  Target target = 8;
  Target canonical_target = 13;

  repeated Target dependency_targets = 11;
  ActionHermeticity hermeticity = 12;

  bool disabled = 14;

  string query = 3;

  repeated string tags = 9;

  ActionDescriptor action_descriptor = 10;

  // Only present for auto assertions.
  Target parent_action = 15;

  // Generated.
  string file_name = 7;

  reserved 1, 2, 4, 5, 6;
}

enum ActionHermeticity {
  UNKNOWN = 0;
  HERMETIC = 1;
  NON_HERMETIC = 2;
}

message Declaration {
  Target target = 2;
  Target canonical_target = 5;

  ActionDescriptor action_descriptor = 3;

  // Generated.
  string file_name = 4;
}

message Test {
  string name = 1;

  string test_query = 2;
  string expected_output_query = 3;

  // Generated.
  string file_name = 4;
}

// TODO(ekrekr): remove this.
message Notebook {
  Target target = 2;

  string notebook_contents = 3;
}

message CompiledGraph {
  ProjectConfig project_config = 4;

  repeated Table tables = 1;
  repeated Operation operations = 2;
  repeated Assertion assertions = 3;
  repeated Declaration declarations = 9;
  // TODO(ekrekr): move the Test action outside of the compiled graph, because
  // it is not used at runtime.
  repeated Test tests = 8;
  repeated Notebook notebooks = 12;

  GraphErrors graph_errors = 7;

  string dataform_core_version = 10;

  repeated Target targets = 11;

  reserved 5, 6;
}

message CoreExecutionRequest {
  oneof request {
    CompileExecutionRequest compile = 1;
  }
}

// Core execution response contains multiple compiled graphs, that are
// versioned, because it facilitates consumers supporting major protobuf changes
// within the same proto file.
message CoreExecutionResponse {
  CompileExecutionResponse compile = 1;
}

message CompileExecutionRequest {
  CompileConfig compile_config = 1;
}
message CompileExecutionResponse {
  CompiledGraph compiled_graph = 1;
}

// This feature list is added to when making potentilly backwards breaking
// changes. It lets the caller of Dataform Core know whether it supports the
// change.
enum SupportedFeatures {
  UNKNOWN_FEATURE = 0;
  ARRAY_BUFFER_IPC = 1;
}

// Workflow Settings specifies the contents of the workflow_settings.yaml
// configuration file.
message WorkflowSettingsConfig {
  // The desired dataform core version to compile against.
  string dataform_core_version = 1;

  // Required. The default database (Google Cloud project ID).
  string default_database = 2;

  // Required. The default schema (BigQuery dataset ID).
  string default_schema = 3;

  // Required. The default BigQuery location to use. For more information on
  // BigQuery locations, see https://cloud.google.com/bigquery/docs/locations.
  string default_location = 4;

  // Required. The default schema (BigQuery dataset ID) for assertions.
  string assertion_schema = 5;

  // Optional. User-defined variables that are made available to project code
  // during compilation. An object containing a list of "key": value pairs.
  // Example: `{ "name": "wrench", "mass": "1.3kg", "count": "3" }`.
  map<string, string> vars = 6;

  // Optional. The suffix that should be appended to all database (Google Cloud
  // project ID) names.
  string database_suffix = 7;

  // Optional. The suffix that should be appended to all schema (BigQuery
  // dataset ID) names.
  string schema_suffix = 8;

  // Optional. The prefix that should be prepended to all table names.
  string table_prefix = 9;
}

// Action configs define the configuration properties of actions, via
// `actions.yaml` files.
// TODO(ekrekr): consolidate these configuration options in the JS API.
message ActionConfigs {
  message ColumnDescriptor {
    // The identifier for the column, using multiple parts for nested records.
    repeated string path = 1;

    // A text description of the column.
    string description = 2;

    // A list of BigQuery policy tags that will be applied to the column.
    repeated string bigquery_policy_tags = 3;
  }

  message Table {
    // Target is the unique action identifier.
    Target target = 1;

    // Canonical Target is the unique action identifier, with no target
    // overrides applied.
    // This option cannot be manually specified in action configs.
    Target canonical_target = 2;

    // Targets (non-canonical) of actions that this action is dependent on.
    repeated Target dependency_targets = 3;

    // Path to the source file that the contents of the action is loaded from.
    string source = 4;

    // Path that the config of the action is loaded from.
    // This option cannot be manually specified in action configs.
    string config_path = 5;

    // A list of user-defined tags with which the action should be labeled.
    repeated string tags = 6;

    // If set to true, this action will not be executed. However, the action
    // may still be depended upon.
    bool disabled = 7;

    // The SQL query.
    string query = 8;

    // Queries to run before `query`. This can be useful for granting
    // permissions.
    repeated string pre_operations = 9;

    // Queries to run after `query`.
    repeated string post_operations = 10;

    // Description of the table.
    string description = 11;

    // Descriptions of columns within the table.
    repeated ColumnDescriptor columns = 12;

    // The key by which to partition the table. Typically the name of a
    // timestamp or the date column. See
    // https://cloud.google.com/dataform/docs/partitions-clusters.
    string partition_by = 13;

    // The number of days for which BigQuery stores data in each partition.
    // The setting applies to all partitions in a table, but is calculated
    // independently for each partition based on the partition time.
    int32 partition_expiration_days = 14;

    // Declares whether the partitioned table requires a WHERE clause
    // predicate filter that filters the partitioning column.
    bool require_partition_filter = 15;

    // The keys by which to cluster partitions by. See
    // https://cloud.google.com/dataform/docs/partitions-clusters.
    repeated string cluster_by = 16;

    // Key-value pairs for BigQuery labels. If the label name contains special
    // characters, e.g. hyphens, then quote its name, e.g. `labels: {
    // "label-name": "value" }`.
    map<string, string> labels = 17;

    // Key-value pairs for the table, view, and materialized view options.
    map<string, string> additional_options = 18;
  }

  message View {
    // Target is the unique action identifier.
    Target target = 1;

    // Canonical Target is the unique action identifier, with no target
    // overrides applied.
    // This option cannot be manually specified in action configs.
    Target canonical_target = 2;

    // Targets (non-canonical) of actions that this action is dependent on.
    repeated Target dependency_targets = 3;

    // Path to the source file that the contents of the action is loaded from.
    string source = 4;

    // Path that the config of the action is loaded from.
    // This option cannot be manually specified in action configs.
    string config_path = 5;

    // A list of user-defined tags with which the action should be labeled.
    repeated string tags = 6;

    // If set to true, this action will not be executed. However, the action
    // may still be depended upon.
    bool disabled = 7;

    // The SQL query.
    string query = 10;

    // Queries to run before `query`. This can be useful for granting
    // permissions.
    repeated string pre_operations = 11;

    // Queries to run after `query`.
    repeated string post_operations = 12;

    // Applies the materialized view optimization, see
    // https://cloud.google.com/bigquery/docs/materialized-views-intro.
    bool materialized = 13;

    // Description of the view.
    string description = 14;

    // Descriptions of columns within the table.
    repeated ColumnDescriptor columns = 15;

    // Key-value pairs for BigQuery labels. If the label name contains special
    // characters, e.g. hyphens, then quote its name, e.g. `labels: {
    // "label-name": "value" }`.
    map<string, string> labels = 16;

    // Key-value pairs for the table, view, and materialized view options.
    map<string, string> additional_options = 17;
  }

  message IncrementalTable {
    // Target is the unique action identifier.
    Target target = 1;

    // Canonical Target is the unique action identifier, with no target
    // overrides applied.
    // This option cannot be manually specified in action configs.
    Target canonical_target = 2;

    // Targets (non-canonical) of actions that this action is dependent on.
    repeated Target dependency_targets = 3;

    // Path to the source file that the contents of the action is loaded from.
    string source = 4;

    // Path that the config of the action is loaded from.
    // This option cannot be manually specified in action configs.
    string config_path = 5;

    // A list of user-defined tags with which the action should be labeled.
    repeated string tags = 6;

    // If set to true, this action will not be executed. However, the action
    // may still be depended upon.
    bool disabled = 7;

    // The SQL query.
    string query = 8;

    // The query that is applied when the table already exists.
    // This option cannot be manually specified in action configs.
    string incremental_query = 9;

    // Queries to run before `query`. This can be useful for granting
    // permissions.
    repeated string pre_operations = 10;

    // Queries to run after `query`.
    repeated string post_operations = 11;

    // If true, prevents the dataset from being rebuilt from scratch.
    bool protected = 12;

    // is specified, if a row arrives whose key matches an existing row's key,
    // then the existing row is overwritten with the new data.
    repeated string unique_key = 13;

    // Description of the incremental table.
    string description = 14;

    // Descriptions of columns within the table.
    repeated ColumnDescriptor columns = 15;

    // The key by which to partition the table. Typically the name of a
    // timestamp or the date column. See
    // https://cloud.google.com/dataform/docs/partitions-clusters.
    string partition_by = 16;

    // The number of days for which BigQuery stores data in each partition.
    // The setting applies to all partitions in a table, but is calculated
    // independently for each partition based on the partition time.
    int32 partition_expiration_days = 17;

    // Declares whether the partitioned table requires a WHERE clause
    // predicate filter that filters the partitioning column.
    bool require_partition_filter = 18;

    // SQL-based filter for when incremental updates are applied.
    string update_partition_filter = 19;

    // The keys by which to cluster partitions by. See
    // https://cloud.google.com/dataform/docs/partitions-clusters.
    repeated string cluster_by = 20;

    // Key-value pairs for BigQuery labels. If the label name contains special
    // characters, e.g. hyphens, then quote its name, e.g. `labels: {
    // "label-name": "value" }`.
    map<string, string> labels = 21;

    // Key-value pairs for the table, view, and materialized view options.
    map<string, string> additional_options = 22;
  }

  message Assertion {
    // Target is the unique action identifier.
    Target target = 1;

    // Canonical Target is the unique action identifier, with no target
    // overrides applied.
    // This option cannot be manually specified in action configs.
    Target canonical_target = 2;

    // Targets (non-canonical) of actions that this action is dependent on.
    repeated Target dependency_targets = 3;

    // Path to the source file that the contents of the action is loaded from.
    string source = 4;

    // Path that the config of the action is loaded from.
    // This option cannot be manually specified in action configs.
    string config_path = 5;

    // A list of user-defined tags with which the action should be labeled.
    repeated string tags = 6;

    // If set to true, this action will not be executed. However, the action
    // may still be depended upon.
    bool disabled = 7;

    // The SQL query.
    string query = 8;

    // Description of the assertion.
    string description = 9;
  }

  message Operation {
    // Target is the unique action identifier.
    Target target = 1;

    // Canonical Target is the unique action identifier, with no target
    // overrides applied.
    // This option cannot be manually specified in action configs.
    Target canonical_target = 2;

    // Targets (non-canonical) of actions that this action is dependent on.
    repeated Target dependency_targets = 3;

    // Path to the source file that the contents of the action is loaded from.
    string source = 4;

    // Path that the config of the action is loaded from.
    // This option cannot be manually specified in action configs.
    string config_path = 5;

    // A list of user-defined tags with which the action should be labeled.
    repeated string tags = 6;

    // If set to true, this action will not be executed. However, the action
    // may still be depended upon.
    bool disabled = 7;

    // The SQL query.
    string query = 8;

    // Declares that this action creates a dataset which should be
    // referenceable as a dependency target, for example by using the `ref`
    // function.
    bool has_output = 9;

    // Description of the operation.
    string description = 10;

    // Descriptions of columns within the operation. Can only be set if
    // hasOutput is true.
    repeated ColumnDescriptor columns = 11;
  }

  message Declaration {
    // Target is the unique action identifier.
    Target target = 1;

    // Canonical Target is the unique action identifier, with no target
    // overrides applied.
    // This option cannot be manually specified in action configs.
    Target canonical_target = 2;

    // Targets (non-canonical) of actions that this action is dependent on.
    repeated Target dependency_targets = 3;

    // Path to the source file that the contents of the action is loaded from.
    string source = 4;

    // Path that the config of the action is loaded from.
    // This option cannot be manually specified in action configs.
    string config_path = 5;

    // A list of user-defined tags with which the action should be labeled.
    repeated string tags = 6;

    // Description of the declaration.
    string description = 7;
  }

  message Notebook {
    // Target is the unique action identifier.
    Target target = 1;

    // Canonical Target is the unique action identifier, with no target
    // overrides applied.
    // This option cannot be manually specified in action configs.
    Target canonical_target = 2;

    // Targets (non-canonical) of actions that this action is dependent on.
    repeated Target dependency_targets = 3;

    // Path to the source file that the contents of the action is loaded from.
    string source = 4;

    // Path that the config of the action is loaded from.
    // This option cannot be manually specified in action configs.
    string config_path = 5;

    // A list of user-defined tags with which the action should be labeled.
    repeated string tags = 6;

    // Description of the notebook.
    string description = 7;

    // TODO(ekrekr): add a notebook runtime field definition.
  }

  message ActionConfig {
    oneof action {
      Table table = 1;
      View view = 2;
      IncrementalTable incremental_table = 3;
      Assertion assertion = 4;
      Operation operation = 5;
      Declaration declaration = 6;
      Notebook notebook = 7;
    }
  }

  repeated ActionConfig actions = 1;
}
