syntax = "proto3";

package dataform;

option java_package = "com.dataform.protos";
option java_outer_classname = "CoreMeta";
option java_multiple_files = true;

option go_package = "github.com/dataform-co/dataform/protos/dataform";

message ProjectConfig {
  string warehouse = 1;

  string default_database = 9;
  string default_schema = 2;
  string default_location = 16;

  string assertion_schema = 5;

  map<string, string> vars = 14;

  string database_suffix = 15;
  string schema_suffix = 7;
  string table_prefix = 11;

  string dataform_core_version = 17;

  reserved 3, 4, 6, 8, 10, 12, 13;
}

message CompileConfig {
  // Required.
  string project_dir = 1;

  // A list of all files in the project directory.
  repeated string file_paths = 8;

  // Project configuration overrides (dataform.json).
  ProjectConfig project_config_override = 3;

  // Override compilation timeout settings.
  int32 timeout_millis = 6;

  reserved 2, 4, 5, 7, 9;
}

message Target {
  string database = 3;
  string schema = 1;
  string name = 2;
}

message BigQueryOptions {
  string partition_by = 1;
  repeated string cluster_by = 2;
  string update_partition_filter = 3;
  map<string, string> labels = 4;
  int32 partition_expiration_days = 5;
  bool require_partition_filter = 6;
  map<string, string> additional_options = 7;
}

message GraphErrors {
  repeated CompilationError compilation_errors = 1;

  reserved 2;
}

message CompilationError {
  string file_name = 1;
  // TODO: Deprecate this and replace with action_target.
  string action_name = 4;
  Target action_target = 5;
  string message = 2;
  string stack = 3;
}

message ActionDescriptor {
  string description = 1;
  // For Operations, 'columns' may be set iff has_output == true.
  // For Assertions, 'columns' will always be empty.
  repeated ColumnDescriptor columns = 2;
  map<string, string> bigquery_labels = 3;
}

message ColumnDescriptor {
  string description = 1;

  // For nested records, the path might look like e.g. ["record", "column"].
  // For simple columns, this will always contain a single entry e.g.
  // ["column"].
  repeated string path = 2;

  string display_name = 3;

  enum DimensionType {
    UNKNOWN_DIMENSION = 0;
    CATEGORY = 1;
    TIMESTAMP = 2;
    NUMBER = 3;
  }
  DimensionType dimension_type = 4;

  enum Aggregation {
    UNKNOWN_AGGREGATION = 0;
    SUM = 1;
    DISTINCT = 2;
    DERIVED = 3;
  }
  Aggregation aggregation = 5;

  string expression = 6;

  repeated string tags = 7;

  // BigQuery specific settings.

  repeated string bigquery_policy_tags = 8;
}

enum TableType {
  UNKNOWN_TYPE = 0;
  TABLE = 1;
  INCREMENTAL = 2;
  VIEW = 3;
  INLINE = 4;
}

message Table {
  // For legacy compatability reasons, both incremental tables and views are
  // configured in compiled graphs via the Table proto.
  TableType enum_type = 36;

  ActionConfig config = 37;

  Target target = 4;
  Target canonical_target = 32;

  repeated Target dependency_targets = 27;
  ActionHermeticity hermeticity = 31;

  bool disabled = 6;

  string type = 3 [deprecated = true];
  string query = 5;
  bool protected = 9;
  bool materialized = 35;

  ActionDescriptor action_descriptor = 24;

  repeated string tags = 23;

  // Incremental only.
  string where = 8 [deprecated = true];
  string incremental_query = 26;
  repeated string unique_key = 30;

  // Pre/post operations.
  repeated string pre_ops = 13;
  repeated string post_ops = 14;
  repeated string incremental_pre_ops = 28;
  repeated string incremental_post_ops = 29;

  // Warehouse specific features.
  BigQueryOptions bigquery = 22;

  // Generated.
  string file_name = 18;

  reserved 1, 2, 7, 12, 16;
}

message Operation {
  ActionConfig config = 15;

  Target target = 3;
  Target canonical_target = 13;
  repeated Target dependency_targets = 11;

  ActionHermeticity hermeticity = 12;

  bool disabled = 14;

  repeated string queries = 6;
  bool has_output = 8;
  repeated string tags = 9;

  ActionDescriptor action_descriptor = 10;

  // Generated.
  string file_name = 7;

  reserved 1, 2, 4, 5;
}

message Assertion {
  Target target = 8;
  Target canonical_target = 13;

  repeated Target dependency_targets = 11;
  ActionHermeticity hermeticity = 12;

  bool disabled = 14;

  string query = 3;

  repeated string tags = 9;

  ActionDescriptor action_descriptor = 10;

  // Only present for auto assertions.
  Target parent_action = 15;

  // Generated.
  string file_name = 7;

  reserved 1, 2, 4, 5, 6;
}

enum ActionHermeticity {
  UNKNOWN = 0;
  HERMETIC = 1;
  NON_HERMETIC = 2;
}

message Declaration {
  ActionConfig config = 16;

  Target target = 2;
  Target canonical_target = 5;

  ActionDescriptor action_descriptor = 3;

  // Generated.
  string file_name = 4;
}

message Test {
  string name = 1;

  string test_query = 2;
  string expected_output_query = 3;

  // Generated.
  string file_name = 4;
}

message Notebook {
  ActionConfig config = 1;

  Target target = 2;

  string notebook_contents = 3;
}

message CompiledGraph {
  ProjectConfig project_config = 4;

  repeated Table tables = 1;
  repeated Operation operations = 2;
  repeated Assertion assertions = 3;
  repeated Declaration declarations = 9;
  // TODO(ekrekr): move the Test action outside of the compiled graph, because
  // it is not used at runtime.
  repeated Test tests = 8;
  repeated Notebook notebooks = 12;

  GraphErrors graph_errors = 7;

  string dataform_core_version = 10;

  repeated Target targets = 11;

  reserved 5, 6;
}

message CoreExecutionRequest {
  oneof request {
    CompileExecutionRequest compile = 1;
  }
}

message CoreExecutionResponse {
  oneof response {
    CompileExecutionResponse compile = 1;
  }
}

message CompileExecutionRequest {
  CompileConfig compile_config = 1;
}

message CompileExecutionResponse {
  CompiledGraph compiled_graph = 1;
}

// This feature list is added to when making potentilly backwards breaking
// changes. It lets the caller of Dataform Core know whether it supports the
// change.
enum SupportedFeatures {
  UNKNOWN_FEATURE = 0;
  ARRAY_BUFFER_IPC = 1;
}

message ActionConfigs {
  repeated ActionConfig actions = 1;
}

message ActionConfig {
  // Target is a unique action identifier.
  Target target = 1;

  // A list of user-defined tags with which the action should be labeled.
  repeated string tags = 2;

  // Targets of actions that this action is dependent on.
  repeated Target dependency_targets = 3;

  // Filename to load the action contents from.
  string file_name = 4;

  // Type specific configs. Must correspond to the declared type.
  oneof action_config {
    TableConfig table = 5;
    ViewConfig view = 6;
    IncrementalTableConfig incremental_table = 7;
    AssertionConfig assertion = 8;
    OperationConfig operation = 9;
    DeclarationConfig declaration = 10;
    NotebookConfig notebook = 11;
  }
}

// Configuration options for BigQuery tables.
message TableConfig {
  // If set to true, this action will not be executed. However, the action may
  // still be depended upon.
  bool disabled = 1;
}

// Configuration options for BigQuery views.
message ViewConfig {
  // If set to true, this action will not be executed. However, the action may
  // still be depended upon.
  bool disabled = 1;

  // If set to true, will make the view materialized.
  // For more information, read the [BigQuery materialized view
  // docs](https://cloud.google.com/bigquery/docs/materialized-views-intro).
  bool materialized = 2;
}

// Configuration options for BigQuery incremental tables.
message IncrementalTableConfig {
  // If set to true, this action will not be executed. However, the action may
  // still be depended upon.
  bool disabled = 1;
}

// Configuration options for BigQuery table assertions.
message AssertionConfig {
  // If set to true, this action will not be executed. However, the action may
  // still be depended upon.
  bool disabled = 1;
}

// Configuration options for BigQuery table opertions.
message OperationConfig {
  // If set to true, this action will not be executed. However, the action may
  // still be depended upon.
  bool disabled = 1;

  // Declares that this `operations` action creates a dataset which should be
  // referenceable using the `ref` function.
  bool has_output = 2;
}

// Configuration options for BigQuery table declarations.
// TODO(ekrekr): remove this empty message, if explicit action type without a
// `type` field proves to be impossible / ugly.
message DeclarationConfig {}

// Configuration options for Vertex AI notebooks.
message NotebookConfig {
  // If set to true, this action will not be executed. However, the action may
  // still be depended upon.
  bool disabled = 1;

  // TODO(ekrekr): add a notebook runtime field definition.
}
