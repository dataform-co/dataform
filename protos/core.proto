syntax="proto3";

package dataform;

option java_package = "com.dataform.protos";
option java_outer_classname = "CoreMeta";
option java_multiple_files = true;

message ProjectConfig {
  // The type of warehouse this project connects to. This is one of "bigquery", "snowflake", "redshift", "postgres".
  string warehouse = 1;

  // The default database under which objects will be created. This setting only applies for BigQuery and Snowflake warehouses.
  string default_database = 9;

  // The default schema in which all objects will be created.
  string default_schema = 2;

  // The default schema in which assertion views will be created.
  string assertion_schema = 5;

  // How many times should failed actions be retried. We strongly advise not setting this value.
  int32 idempotent_action_retries = 8;

  // A suffix that will be applied to all schemas. This is useful for isolating development runs from production by setting a value such as "_dev".
  string schema_suffix = 7;

  // Deprecated. Please use "defaultDatabase" instead.
  string gcloud_project_id = 6;
}

message Environment {
  string name = 1;
  
  message GitReference {
    oneof git_reference {
      string branch = 1;
      string commit_sha = 2;
    }
  }

  GitReference git_reference = 2;
  ProjectConfig config_override = 3;
}

message Environments {
  repeated Environment environments = 1;
}

message RunConfig {
  // A list of action names that should be run. We recommend using tags instead where possible.
  repeated string actions = 1;

  // A list of tags to run. Any actions with the given tags will be executed during this run.
  repeated string tags = 5;

  // Whether any dependencies of the directly included tags or actions should also be executed.
  bool include_dependencies = 3;

  // Indicates if incremental tables should be rebuilt from scratch, even if they exist.
  bool full_refresh = 2;

  // Intended for temporary testing, not included in a permanent API.
  bool use_pg_pool_for_redshift = 6;

  reserved 4;
}

message GenerateIndexConfig {
  CompileConfig compile_config = 1;
  repeated string include_paths = 2;
  repeated string definition_paths = 3;

  // Deprecated.
  string return_override = 4;
}

message CompileConfig {
  // Required.
  string project_dir = 1;

  // Project configuration overrides (dataform.json).
  ProjectConfig project_config_override = 3;

  // If supplied, only the compiled form of 'query' will be returned.
  string query = 4;

  // Override compilation timeout settings.
  int32 timeout_millis = 6;

  // Deprecated.
  string schema_suffix_override = 2;
  string return_override = 5;
}

// A reference to a relation, or object inside a warehouse.
message Target {
  // The database of the object.
  string database = 3;

  // The schema of the object.
  string schema = 1;

  // The name of the object within the schema.
  string name = 2;
}

message BigQueryOptions {
  string partition_by = 1;
}

message RedshiftOptions {
  string dist_key = 1;
  string dist_style = 2;
  repeated string sort_keys = 3;
  string sort_style = 4;
  bool bind = 5;
}

message SQLDataWarehouseOptions {
  string distribution = 1;
}

message GraphErrors {
  repeated CompilationError compilation_errors = 1;
  repeated ValidationError validation_errors = 2;
}

message ValidationError {
  string action_name = 1;
  string message = 2;
}

message CompilationError {
  string file_name = 1;
  string message = 2;
  string stack = 3;
}

message ActionDescriptor {
  string description = 1;
  // For Operations, 'columns' may be set iff has_output == true.
  // For Assertions, 'columns' will always be empty.
  repeated ColumnDescriptor columns = 2;
}

message ColumnDescriptor {
  string description = 1;
  // For nested records, the path might look like e.g. ["record", "column"].
  // For simple columns, this will always contain a single entry e.g. ["column"].
  repeated string path = 2; 
}

message Table {
  Target target = 4;
  repeated Target dependency_targets = 27;
  
  bool disabled = 6;

  string type = 3;
  string query = 5;
  bool protected = 9;

  ActionDescriptor action_descriptor = 24;

  repeated string tags = 23;

  // Incremental only.
  string where = 8;
  string incremental_query = 26;

  // Pre/post operations.
  repeated string pre_ops = 13;
  repeated string post_ops = 14;

  // Warehouse specific features.
  RedshiftOptions redshift = 21;
  BigQueryOptions bigquery = 22;
  SQLDataWarehouseOptions sql_data_warehouse = 25;

  // Generated.
  string file_name = 18;

  // Deprecated.
  repeated string deprecated_parsed_columns = 12;
  repeated ValidationError deprecated_validation_errors = 7;
  string name = 1; // Use 'target' instead.
  repeated string dependencies = 2; // Use 'dependency_targets' instead.

  reserved 16;
}

message Operation {
  Target target = 3;
  repeated Target dependency_targets = 11;

  repeated string queries = 6;
  bool has_output = 8;
  repeated string tags = 9;

  ActionDescriptor action_descriptor = 10;

  // Generated.
  string file_name = 7;

  // Deprecated.
  string name = 1; // Use 'target' instead.
  repeated string dependencies = 2; // Use 'dependency_targets' instead.

  reserved 4, 5;
}

message Assertion {
  Target target = 8;
  repeated Target dependency_targets = 11;

  string query = 3;

  repeated string tags = 9;

  ActionDescriptor action_descriptor = 10;
  
  // Generated.
  string file_name = 7;

  // Deprecated.
  string name = 1; // Use 'target' instead.
  repeated string dependencies = 2; // Use 'dependency_targets' instead.

  reserved 4, 5, 6;
}

message Declaration {
  string name = 1;

  Target target = 2;

  ActionDescriptor action_descriptor = 3;

  // Generated.
  string file_name = 4;
}

message Test {
  string name = 1;

  string test_query = 2;
  string expected_output_query = 3;

  // Generated.
  string file_name = 4;
}

message CompiledGraph {
  ProjectConfig project_config = 4;

  repeated Table tables = 1;
  repeated Operation operations = 2;
  repeated Assertion assertions = 3;
  repeated Declaration declarations = 9;
  repeated Test tests = 8;

  GraphErrors graph_errors = 7;

  string dataform_core_version = 10;

  repeated ValidationError deprecated_validation_errors = 5;
  repeated CompilationError deprecated_compilation_errors = 6;

  repeated Target targets = 11;
}

// Describes an individual task (SQL query) that will be executed.
message ExecutionTask {

  // The type of the task, either "statement" or "assertion".
  string type = 1;

  // The SQL statement for this task.
  string statement = 2;
}

// Describes information about an action that should be executed in the warehouse.
message ExecutionAction {

  // Name of the action.
  string name = 1;

  // A list of names of actions this action depends upon.
  repeated string dependencies = 3;

  // A list of tasks that must be performed as part of this action.
  repeated ExecutionTask tasks = 2;

  // The type of the action. One of "table", "assertion", "test", "operation".
  string type = 4;

  // The target relation for this action if it has one.
  Target target = 5;

  // The type of table that will be created. Set for actions of type "table" only.
  string table_type = 6;
}

// Contains information about the state of the warehouse.
message WarehouseState {

  // A list of metadata about tables (and views) in the warehouse.
  repeated TableMetadata tables = 1;
}

// Describes the overall execution graph, containing actions and tasks that must be run.
message ExecutionGraph {

  // The project configuration for this run, including any overrides.
  ProjectConfig project_config = 1;

  // The configuration for this run.
  RunConfig run_config = 2;

  // The state of the warehouse when this graph was built (typically the start of a run).
  WarehouseState warehouse_state = 4;

  // The actions that must be executed as part of this run.
  repeated ExecutionAction actions = 3;
}

message ExecutedTask {
  ExecutionTask task = 1;

  bool ok = 2;
  bool skipped = 5;
  string error = 3;
}

// Describes timing information for various actions inside dataform runs.
message Timing {
  // When the run, action or task started in milliseconds from the unix epoch.
  int64 start_time_millis = 1;

  // When the run, action or task ended in milliseconds from the unix epoch.
  int64 end_time_millis = 2;
}

// Information about the result and status of a run.
message RunResult {

  // An enumeration of possible run execution statuses.
  enum ExecutionStatus {
    UNKNOWN = 0;
    RUNNING = 1;
    SUCCESSFUL = 2;
    FAILED = 3;
    CANCELLED = 4;
  }

  // The execution status of this run.
  ExecutionStatus status = 1;

  // A list of execution results for individual actions in the graph.
  repeated ActionResult actions = 2;

  // Timing information for the run overall.
  Timing timing = 3;
}

// Information about the result and status of an action.
message ActionResult {

  // The name of the action.
  string name = 1;

  // An enumeration of all possible action execution statuses.
  enum ExecutionStatus {
    UNKNOWN = 0;
    RUNNING = 1;
    SUCCESSFUL = 2;
    FAILED = 3;
    SKIPPED = 4;
    DISABLED = 5;
    CANCELLED = 6;
  }

  // The execution status of the action.
  ExecutionStatus status = 2;

  // Results for individual tasks inside the action.
  repeated TaskResult tasks = 3;

  // Timing information for the action.
  Timing timing = 4;
}

// Information about the result and status of an task.
message TaskResult {

  // An enumeration of all possible task execution statuses.
  enum ExecutionStatus {
      UNKNOWN = 0;
      RUNNING = 1;
      SUCCESSFUL = 2;
      FAILED = 3;
      SKIPPED = 4;
      CANCELLED = 5;
  }

  // The execution status of the task.
  ExecutionStatus status = 1;

  // An error message that was returned for failed tasks.
  string error_message = 2;

  // Timing information for the task.
  Timing timing = 3;
}

enum ActionExecutionStatus {
  UNKNOWN_ACTION_EXECUTION_STATUS = 0;
  SUCCESSFUL = 1;
  FAILED = 2;
  SKIPPED = 3;
  DISABLED = 4;
}

message ExecutedAction {
  string name = 1;
  // May be empty, indicating that nothing was run as part of this Action.
  repeated ExecutedTask tasks = 2;

  ActionExecutionStatus status = 6;
  int64 execution_time = 5;

  // Deprecated status fields. Prefer using the 'status' field.
  bool deprecated_ok = 3;
  bool deprecated_skipped = 4;
}

// TODO: Instead of returning this as a result of run(...), return an
// ExecutionGraph along with something like a RunStatus message indicating the
// success/failure of executing that graph on the data warehouse.
message ExecutedGraph {
  ProjectConfig project_config = 1;
  RunConfig run_config = 2;
  WarehouseState warehouse_state = 4;

  bool ok = 5;
  repeated ExecutedAction actions = 3;
}

message TestResult {
  string name = 1;
  bool successful = 2;
  repeated string messages = 3;
}

// Describes a field inside a table or view in the warehouse. Only one of "primitive" or "struct" will be set.
message Field {

  // The name of the field.
  string name = 1;

  // Any warehouse specific flags or labels for this field.
  repeated string flags = 4;

  oneof type {
    // The primitive type of the field, if it is primitive.
    string primitive = 2;

    // A description of fields that have an object or struct type.
    Fields struct = 3;
  }
}

// Describes a set of fields or columns in a table or struct.
message Fields {

  // A list of individual fields.
  repeated Field fields = 1;
}

// Metadata about a table or view in the warehouse.
message TableMetadata {

  // The full spec of the table this metadata refers to.
  Target target = 1;

  // The type of the table, either "table" or "view".
  string type = 2;

  // A list of fields contained within this table.
  repeated Field fields = 3;
}
